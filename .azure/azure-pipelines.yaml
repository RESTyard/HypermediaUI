trigger: none

resources:
  repositories:
    - repository: templates
      name: Rymax-One/ci-templates
      type: git

variables:
  - name: project
    value: 'rymax'
  - name: product
    value: 'hypermedia-ui'
  - template: templates/stage-vars.yaml@templates
  - name: npm_config_cache
    value: $(Pipeline.Workspace)/.npm

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: init
    displayName: 'Init'
    jobs:
      - job: init
        steps:
          - bash: npm --version && node --version
  - stage: dev_build
    displayName: 'Dev build'
    dependsOn: init
    condition: and(succeeded(), eq(${{ variables.isDev }}, 'true'))
    jobs:
      - job: build
        displayName: 'Build project for dev environment'
        steps:
          - checkout: self
          - template: build-env.yaml
            parameters:
              environment: 'dev'
              project: $(project)

  - stage: staging_build
    displayName: 'Staging build'
    dependsOn: init
    condition: and(succeeded(), eq(${{ variables.isStaging }}, 'true'))
    variables:
      - group: stripe-staging
    jobs:
      - job: build
        displayName: 'Build project for staging environment'
        steps:
          - checkout: self
          - template: build-env.yaml
            parameters:
              environment: 'staging'
              project: $(project)
  - stage: production_build
    displayName: 'Production build'
    dependsOn: init
    condition: and(succeeded(), eq(${{ variables.isProd }}, 'true'))
    jobs:
      - job: build
        displayName: 'Build project for production environment'
        steps:
          - checkout: self
          - template: build-env.yaml
            parameters:
              environment: 'prod'
              project: $(project)

  - stage: dev
    displayName: 'Dev deployment'
    condition: succeeded()
    dependsOn: dev_build
    jobs:
      - deployment:
        displayName: 'Dev deployment'
        environment: 'development'
        strategy:
          runOnce:
            deploy:
              steps:
                - template: deploy-env.yaml
                  parameters:
                    environment: 'dev'
                    project: $(project)
                    product: $(product)

  - stage: staging
    displayName: 'Staging deployment'
    condition: and(succeeded(), eq(${{ variables.isStaging }}, 'true'))
    dependsOn: staging_build
    jobs:
      - deployment:
        displayName: 'Staging deployment'
        environment: 'staging'
        strategy:
          runOnce:
            deploy:
              steps:
                - template: deploy-env.yaml
                  parameters:
                    environment: 'staging'
                    project: $(project)
                    product: $(product)
  - stage: production
    displayName: 'Production deployment'
    condition: and(succeeded(), eq(${{ variables.isProd }}, 'true'))
    dependsOn: production_build
    jobs:
      - deployment:
        displayName: 'Production deployment'
        environment: 'production'
        strategy:
          runOnce:
            deploy:
              steps:
                - template: deploy-env.yaml
                  parameters:
                    environment: 'prod'
                    project: $(project)
                    product: $(product)
